{"version":3,"sources":["logo.svg","common.js","config.js","Overview/index.js","SocketManager.js","Livechart/index.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStckData","item","stockData","split","length","x","Date","y","config","chart","type","title","text","align","style","color","fontWeight","fontSize","tooltip","enabled","theme","xaxis","labels","colors","yaxis","Overview","props","state","stocksData","this","getOHLCData","params","successCallback","prams","url","historicApiUrl","allowCaching","data","stockObj","push","setState","fetch","headers","method","then","response","json","localStorage","JSON","stringify","catch","err","historicData","parse","alert","options","historicChartOptions","series","height","width","Component","SocketManager","socket","openSocket","interval","on","console","log","erorCallback","emit","resp","acnknwledge","setInterval","clearInterval","Livechart","id","markers","format","min","max","counter","firstData","updateLiveData","bind","errorHandler","socketManager","socketURL","subscribeToQuotes","ApexCharts","document","querySelector","render","liveData","updateSeries","unsubscribeToQuotes","liveDataInterval","Router","className","activeClassName","textDecoration","to","exact","path","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","StrictMode","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb50be38.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport const makeAPICall = (params, successCallback) => {\n  return fetch(params.url, {\n    headers: {\n      \"Accept-Encoding\": \"gzip\"\n    },\n    method: params.method || 'GET',\n    data: params.data\n  })\n    .then((response) => response.json())\n    .then((data) => {\n      if(params.allowCaching){\n        localStorage['historicData'] = JSON.stringify({data : data})\n      }\n      if (successCallback) {\n        successCallback(data)\n      }\n    })\n    .catch((err) => {\n      let historicData = localStorage['historicData']\n      if(historicData && successCallback){\n        successCallback(JSON.parse(historicData).data)\n      }\n      else{\n        alert(\"Network error\")\n      }\n    })\n}\n\nexport const createStckData = (item) => {\n  let stockData = item.split(\",\")\n  if (stockData && stockData.length) {\n    return {\n      x: new Date(+stockData[0]),\n      y: [stockData[1], stockData[2], stockData[3], stockData[4]]\n    }\n  }\n}\n","let config = {}\nconfig.historicApiUrl = \"http://kaboom.rksv.net/api/historical?interval=1\"\nconfig.socketURL = \"http://kaboom.rksv.net/watch\"\nconfig.historicChartOptions = {\n    chart: {\n        type: 'candlestick'\n    },\n    title: {\n        text: 'Historic data',\n        align: 'center',\n        style: {\n            color: 'grey',\n            fontWeight: 'bold',\n            fontSize: 25\n        }\n    },\n    tooltip: {\n        enabled: true,\n        theme: 'dark'\n    },\n    xaxis: {\n        type: 'datetime',\n        labels: {\n            style: {\n                colors: 'grey'\n            }\n        }\n    },\n    yaxis: {\n        labels: {\n            style: {\n                colors: 'grey'\n            }\n        },\n        tooltip: {\n            enabled: true\n        }\n    }\n}\n\nexport default config;","import React, { Component } from 'react';\nimport ReactApexChart from 'react-apexcharts'\nimport { makeAPICall, createStckData } from '../common';\nimport config from '../config';\n\nclass Overview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stocksData : []\n        }\n    }\n\n    componentDidMount() {\n        this.getOHLCData();\n    }\n\n    getOHLCData() {\n        let prams = {\n            url: config.historicApiUrl,\n            allowCaching : true\n        }\n        makeAPICall(prams, (data) => {\n            let stocksData = []\n            for (let item of data) {\n                let stockObj = createStckData(item)\n                if(stockObj){\n                    stocksData.push(stockObj)\n                }\n            }\n            this.setState({ stocksData })\n        });\n    }\n\n    render() {\n        let {stocksData} = this.state\n        return (\n            <div>\n                <ReactApexChart\n                    options={config.historicChartOptions}\n                    series={[{ data : stocksData }]}\n                    type=\"candlestick\"\n                    height={450} width={\"100%\"}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Overview;","import openSocket from 'socket.io-client';\n\nclass SocketManager {\n    constructor(url) {\n        this.socket = openSocket(url);\n        this.interval = null;\n        this.socket.on('connect', () => {\n            console.log(\"Connected\")\n        })\n        this.socket.on('disconnect', () => {\n            console.log(\"Disconnected from server\")\n        })\n    }\n    subscribeToQuotes(successCallback, erorCallback) {\n        try {\n            this.socket.emit('sub', { state: true })\n\n            this.socket.on(\"data\", (resp, acnknwledge) => {\n                if (successCallback) {\n                    successCallback(resp)\n                }\n                this.interval = setInterval(() => {\n                    acnknwledge(1);\n                }, 500)\n            })\n\n            this.socket.on(\"error\", (resp) => {\n                if (erorCallback) {\n                    erorCallback(resp)\n                }\n            })\n        } catch (err) {\n            console.log(err)\n        }\n    }\n\n    unsubscribeToQuotes() {\n        this.socket.emit('unsub', { state: false })\n        if(this.interval){\n            clearInterval(this.interval)\n        }\n    }\n\n}\n\nexport default SocketManager;","import React, { Component } from 'react';\nimport SocketManager from '../SocketManager';\nimport { createStckData, makeAPICall } from '../common';\nimport ApexCharts from \"apexcharts\";\nimport config from '../config';\n\nclass Livechart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            options : {\n                chart: {\n                    type: 'candlestick',\n                    height: 450,\n                    id:\"realtime\"\n                },\n                title: {\n                    text: 'Live data',\n                    align: 'center',\n                    style: {\n                        color: 'grey',\n                        fontWeight: 'bold',\n                        fontSize: 25\n                    }\n                },\n                tooltip: {\n                    enabled: true,\n                    theme: 'dark'\n                },\n                markers:{\n                    color:'red'\n                },\n                xaxis: {\n                    type: 'datetime',\n                    labels: {\n                        style: {\n                            colors: 'grey'\n                        },\n                        labels: {\n                            format: 'hh : mm',\n                        }\n                    }\n                },\n                yaxis: {\n                    min:0,\n                    max:5000,\n                    labels: {\n                        style: {\n                            colors: 'grey'\n                        }\n                    },\n                    tooltip: {\n                        enabled: true\n                    }\n                },\n                series : [{ data : [] }],\n            },\n        }\n        this.counter = 0\n        this.firstData = null\n        this.updateLiveData = this.updateLiveData.bind(this);\n        this.errorHandler = this.errorHandler.bind(this);\n        this.socketManager = new SocketManager(config.socketURL)\n    }\n    componentDidMount() {\n        this.socketManager.subscribeToQuotes(this.updateLiveData, this.errorHandler);\n        this.chart = new ApexCharts(\n            document.querySelector(\"#chart\"),\n            this.state.options\n          );\n        this.chart.render();\n        let liveData = localStorage['liveData']\n        if(liveData){\n            this.updateLiveData(JSON.parse(liveData).data)\n        }\n    }\n\n    updateLiveData(liveData) {\n        if(liveData){\n            let data = createStckData(liveData)\n            this.counter += 1\n            this.chart.updateSeries([{data : [data]}])\n            localStorage['liveData'] = JSON.stringify({data : liveData})\n        }\n        \n    }\n\n    errorHandler() {\n        alert(\"Please try again later...\")\n    }\n\n    componentWillUnmount() {\n        this.socketManager.unsubscribeToQuotes()\n        if (this.liveDataInterval) {\n            clearInterval(this.liveDataInterval)\n        }\n    }\n\n\n    render() {\n        return (\n            <div id=\"chart\">\n            </div>\n        );\n    }\n}\n\nexport default Livechart;","import React from 'react';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport Overview from \"./Overview\";\nimport Livechart from \"./Livechart\";\n\nexport default function Router() {\n  return (\n    <BrowserRouter>\n      <div >\n        <div className=\"tab\">\n          <div className=\"button\">\n            <NavLink activeClassName=\"active\" style={{ textDecoration: 'none' }} to=\"/overview\">Overview</NavLink>\n          </div>\n          <div className=\"button\">\n            <NavLink activeClassName=\"active\" style={{ textDecoration: 'none' }} to=\"/livechart\">Live chart</NavLink>\n          </div>\n        </div>\n        <hr />\n\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n              return (\n                  <Redirect to=\"/overview\" />\n              )\n            }}\n          />\n          <Route\n            exact\n            path=\"/upstox\"\n            render={() => {\n              return (\n                  <Redirect to=\"/overview\" />\n              )\n            }}\n          />\n          <Route exact path=\"/overview\">\n            <Overview />\n          </Route>\n          <Route path=\"/livechart\">\n            <Livechart />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Router from './Router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Router/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}